import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import colors
import statistics
from scipy import stats

from dsmodeseparation import a,b,c,d,m,n,k,l,FirstOvertonelmcds,FirstOvertonesmcds,Fundamentallmcds,Fundamentalsmcds

### Determining distances to the LMC and SMC using the generated relations/models ###

## Fundamental Mode Distance determination ##

def FundSMCdsDistance(I, P): # Using the P-L relationship generated by the Fundamental mode SMC Delta Scuti Variables, calculate distances to the LMC.
    dm = ((np.float64(a) * np.float64(np.log10(P))) + np.float64(b))
    var2 = ((I) - dm) / 5
    dist = 10 * 10 ** var2
    return dist

def FundLMCdsDistance(I, P): # Using the P-L relationship generated by the Fundamental mode LMC Delta Scuti Variables, calculate distances to the SMC.
    dm = ((np.float64(c) * np.float64(np.log10(P))) + np.float64(d))
    var2 = ((I) - dm) / 5
    dist = 10 * 10 ** var2
    return dist

#First Overtone Distance determination

def FOSMCdsDistance(I, P): # Using the P-L relationship generated by the First Overtone SMC Delta Scuti Variables, calculate distances to the LMC.
    dm = ((np.float64(m) * np.float64(np.log10(P))) + np.float64(n))
    var2 = ((I) - dm) / 5
    dist = 10 * 10 ** var2
    return dist

def FOLMCdsDistance(I, P): # Using the P-L relationship generated by the First Overtone LMC Delta Scuti Variables, calculate distances to the SMC.
    dm = ((np.float64(k) * np.float64(np.log10(P))) + np.float64(l))
    var2 = ((I) - dm) / 5
    dist = 10 * 10 ** var2
    return dist

## Median Distance determination and %Error ##

# SMC Distance Error

def SMCperror(dist):
    print(dist)
    print(np.abs((dist - 62440) / 62440)*100)

# LMC Distance Error

def LMCperror(dist):
    print(dist)
    print(np.abs((dist - 49590) / 49590)*100)

### Distance Return ###

# Distances derived from modelling data #

# Fundamental Mode SMC Distances
print("SMC Fund Dists")
print(SMCperror(statistics.median(FundLMCdsDistance(Fundamentalsmcds['I'], Fundamentalsmcds['P1']))))
print(SMCperror(statistics.median(FOSMCdsDistance(Fundamentalsmcds['I'], Fundamentalsmcds['P1']))))
print(SMCperror(statistics.median(FOLMCdsDistance(Fundamentalsmcds['I'], Fundamentalsmcds['P1']))))

# Fundamental Mode LMC Distances
print("LMC Fund Dists")
print(LMCperror(statistics.median(FundSMCdsDistance(Fundamentallmcds['I'], Fundamentallmcds['P1']))))
print(LMCperror(statistics.median(FOSMCdsDistance(Fundamentallmcds['I'], Fundamentallmcds['P1']))))
print(LMCperror(statistics.median(FOLMCdsDistance(Fundamentallmcds['I'], Fundamentallmcds['P1']))))

# First Overtone SMC Distances
print("SMC FO Dists")
print(SMCperror(statistics.median(FundSMCdsDistance(FirstOvertonesmcds['I'], FirstOvertonesmcds['P2']))))
print(SMCperror(statistics.median(FundLMCdsDistance(FirstOvertonesmcds['I'], FirstOvertonesmcds['P2']))))
print(SMCperror(statistics.median(FOLMCdsDistance(FirstOvertonesmcds['I'], FirstOvertonesmcds['P2']))))
 
# First Overtone LMC Distances
print("LMC FO Dists")
print(LMCperror(statistics.median(FundSMCdsDistance(FirstOvertonelmcds['I'], FirstOvertonelmcds['P2']))))
print(LMCperror(statistics.median(FundLMCdsDistance(FirstOvertonelmcds['I'], FirstOvertonelmcds['P2']))))
print(LMCperror(statistics.median(FOSMCdsDistance(FirstOvertonelmcds['I'], FirstOvertonelmcds['P2']))))

### Intragalactic Distances ###


# Model Accuracy Function #
def star_dist_accuracy(modeldist, truedist):
    return (modeldist/truedist)*100

from intragen import Fundamentalblgds, FirstOvertoneblgds, Fundamentaldiskds, FirstOvertonediskds

## Calculating the Model Distance for each dataframe - determining accuracy for each model ##

###

### Generating copies of the imported datasets ###

FundamentalblgdsF = Fundamentalblgds.copy()
FirstOvertoneblgdsF = FirstOvertoneblgds.copy()
FundamentaldiskdsF = Fundamentaldiskds.copy()
FirstOvertonediskdsF = FirstOvertonediskds.copy()

# Fundamental Galactic Bulge Delta Scuti Dataframe #

FundamentalblgdsF['SMCmodeldist'] = FundSMCdsDistance(FundamentalblgdsF['I'], FundamentalblgdsF['P1'])

FundamentalblgdsF['LMCmodeldist'] = FundLMCdsDistance(FundamentalblgdsF['I'], FundamentalblgdsF['P1'])

print('Fundamental BULGE SMC DS Accuracy %', statistics.median(star_dist_accuracy(FundamentalblgdsF['SMCmodeldist'], FundamentalblgdsF['Distance'])))
print('Fundamental BULGE LMC DS Accuracy %', statistics.median(star_dist_accuracy(FundamentalblgdsF['LMCmodeldist'], FundamentalblgdsF['Distance'])))

###

# First Overtone Galactic Bulge Delta Scuti Dataframe #

FirstOvertoneblgdsF['SMCmodeldist'] = FOSMCdsDistance(FirstOvertoneblgdsF['I'], FirstOvertoneblgdsF['P2'])

FirstOvertoneblgdsF['LMCmodeldist'] = FOLMCdsDistance(FirstOvertoneblgdsF['I'], FirstOvertoneblgdsF['P2'])

print('FirstOvertone BULGE SMC DS Accuracy %', statistics.median(star_dist_accuracy(FirstOvertoneblgdsF['SMCmodeldist'], FirstOvertoneblgdsF['Distance'])))
print('FirstOvertone BULGE LMC DS Accuracy %', statistics.median(star_dist_accuracy(FirstOvertoneblgdsF['LMCmodeldist'], FirstOvertoneblgdsF['Distance'])))

###

# Fundamental Galactic Disk Delta Scuti Dataframe #

FundamentaldiskdsF['SMCmodeldist'] = FundSMCdsDistance(FundamentaldiskdsF['I'], FundamentaldiskdsF['P1'])

FundamentaldiskdsF['LMCmodeldist'] = FundLMCdsDistance(FundamentaldiskdsF['I'], FundamentaldiskdsF['P1'])

print('Fundamental DISK SMC DS Accuracy %', statistics.median(star_dist_accuracy(FundamentaldiskdsF['SMCmodeldist'], FundamentaldiskdsF['Distance'])))
print('Fundamental DISK LMC DS Accuracy %', statistics.median(star_dist_accuracy(FundamentaldiskdsF['LMCmodeldist'], FundamentaldiskdsF['Distance'])))

###

# First Overtone Galactic Disk Delta Scuti Dataframe #

FirstOvertonediskdsF['SMCmodeldist'] = FundSMCdsDistance(FirstOvertonediskdsF['I'], FirstOvertonediskdsF['P1'])

FirstOvertonediskdsF['LMCmodeldist'] = FundLMCdsDistance(FirstOvertonediskdsF['I'], FirstOvertonediskdsF['P1'])

print('FirstOvertone DISK SMC DS Accuracy %', statistics.median(star_dist_accuracy(FirstOvertonediskdsF['SMCmodeldist'], FirstOvertonediskdsF['Distance'])))
print('FirstOvertone DISK LMC DS Accuracy %', statistics.median(star_dist_accuracy(FirstOvertonediskdsF['LMCmodeldist'], FirstOvertonediskdsF['Distance'])))

###

# The resulting model and true distances will be exported to the Datavis file (Data visualiation file), Truedist vs Modeldist visualised.

### Intergalactic Distances ###

print('ds distances complete, sending dataframes to datavis')









